#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/verify-rename.sh

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
OLD_NAME="roo-code"
NEW_NAME="researcherry"
OLD_ORG="roo-code"
NEW_ORG="researcherry"

# –§—É–Ω–∫—Ü–∏–∏
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
if [[ ! -f "package.json" ]] || [[ ! -f "pnpm-workspace.yaml" ]]; then
    log_error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞..."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–π
count_occurrences() {
    local pattern="$1"
    local file_pattern="$2"
    local count=$(find . -name "$file_pattern" -not -path "./node_modules/*" -not -path "./.git/*" -not -path "./.turbo/*" -exec grep -l "$pattern" {} \; 2>/dev/null | wc -l)
    echo $count
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞
check_file() {
    local file="$1"
    local pattern="$2"
    local description="$3"
    
    if [[ -f "$file" ]]; then
        if grep -q "$pattern" "$file" 2>/dev/null; then
            log_error "‚ùå $description: –Ω–∞–π–¥–µ–Ω–æ –≤ $file"
            return 1
        else
            log_success "‚úÖ $description: OK –≤ $file"
            return 0
        fi
    else
        log_warning "‚ö†Ô∏è  –§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
check_directory() {
    local dir="$1"
    local description="$2"
    
    if [[ -d "$dir" ]]; then
        log_success "‚úÖ $description: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return 0
    else
        log_error "‚ùå $description: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
}

# –°—á–µ—Ç—á–∏–∫–∏
old_occurrences=0
new_occurrences=0
errors=0

log_info "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ package.json
check_file "package.json" "\"name\": \"$OLD_NAME\"" "–°—Ç–∞—Ä–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞" || ((errors++))
check_file "package.json" "\"name\": \"$NEW_NAME\"" "–ù–æ–≤–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞" || ((errors++))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ workspace –ø–∞–∫–µ—Ç–æ–≤
packages=("types" "cloud" "ipc" "telemetry" "evals" "build" "config-eslint" "config-typescript")
for pkg in "${packages[@]}"; do
    check_file "packages/$pkg/package.json" "\"name\": \"@$OLD_ORG/$pkg\"" "–°—Ç–∞—Ä–æ–µ –∏–º—è –ø–∞–∫–µ—Ç–∞ @$OLD_ORG/$pkg" || ((errors++))
    check_file "packages/$pkg/package.json" "\"name\": \"@$NEW_ORG/$pkg\"" "–ù–æ–≤–æ–µ –∏–º—è –ø–∞–∫–µ—Ç–∞ @$NEW_ORG/$pkg" || ((errors++))
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
check_file "apps/web-researcherry/package.json" "\"name\": \"@$NEW_ORG/web-researcherry\"" "–ù–æ–≤–æ–µ –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è web-researcherry" || ((errors++))
check_file "apps/web-evals/package.json" "\"name\": \"@$NEW_ORG/web-evals\"" "–ù–æ–≤–æ–µ –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è web-evals" || ((errors++))
check_file "webview-ui/package.json" "\"name\": \"@$NEW_ORG/vscode-webview\"" "–ù–æ–≤–æ–µ –∏–º—è –ø–∞–∫–µ—Ç–∞ vscode-webview" || ((errors++))

log_info "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
check_directory "apps/web-researcherry" "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" || ((errors++))
check_directory "apps/web-roo-code" "–°—Ç–∞—Ä–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ)" && ((errors++))

log_info "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ tsconfig.json —Ñ–∞–π–ª–æ–≤
check_file "packages/types/tsconfig.json" "\"extends\": \"@$OLD_ORG/" "–°—Ç–∞—Ä—ã–µ extends –≤ types/tsconfig.json" || ((errors++))
check_file "packages/types/tsconfig.json" "\"extends\": \"@$NEW_ORG/" "–ù–æ–≤—ã–µ extends –≤ types/tsconfig.json" || ((errors++))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ turbo.json
check_file "turbo.json" "@$OLD_ORG/" "–°—Ç–∞—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ turbo.json" || ((errors++))
check_file "turbo.json" "@$NEW_ORG/" "–ù–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ turbo.json" || ((errors++))

log_info "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –∫–æ–¥–µ ==="

# –ü–æ–¥—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ç–∞—Ä—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
old_imports=$(count_occurrences "from \"@$OLD_ORG/" "*.ts")
old_imports_tsx=$(count_occurrences "from \"@$OLD_ORG/" "*.tsx")
old_imports_js=$(count_occurrences "from \"@$OLD_ORG/" "*.js")
old_imports_jsx=$(count_occurrences "from \"@$OLD_ORG/" "*.jsx")
total_old_imports=$((old_imports + old_imports_tsx + old_imports_js + old_imports_jsx))

# –ü–æ–¥—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
new_imports=$(count_occurrences "from \"@$NEW_ORG/" "*.ts")
new_imports_tsx=$(count_occurrences "from \"@$NEW_ORG/" "*.tsx")
new_imports_js=$(count_occurrences "from \"@$NEW_ORG/" "*.js")
new_imports_jsx=$(count_occurrences "from \"@$NEW_ORG/" "*.jsx")
total_new_imports=$((new_imports + new_imports_tsx + new_imports_js + new_imports_jsx))

if [[ $total_old_imports -gt 0 ]]; then
    log_error "‚ùå –ù–∞–π–¥–µ–Ω–æ $total_old_imports —Ñ–∞–π–ª–æ–≤ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ @$OLD_ORG/"
    ((errors++))
else
    log_success "‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã @$OLD_ORG/ –∑–∞–º–µ–Ω–µ–Ω—ã"
fi

if [[ $total_new_imports -gt 0 ]]; then
    log_success "‚úÖ –ù–∞–π–¥–µ–Ω–æ $total_new_imports —Ñ–∞–π–ª–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ @$NEW_ORG/"
else
    log_warning "‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ @$NEW_ORG/"
fi

log_info "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è
if pnpm build > /dev/null 2>&1; then
    log_success "‚úÖ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
else
    log_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞"
    ((errors++))
fi

log_info "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ TypeScript
if pnpm check-types > /dev/null 2>&1; then
    log_success "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
else
    log_warning "‚ö†Ô∏è  –ï—Å—Ç—å –æ—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é"
fi

log_info "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤ ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
if pnpm test > /dev/null 2>&1; then
    log_success "‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
else
    log_warning "‚ö†Ô∏è  –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é"
fi

log_info "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞ ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞
if pnpm lint > /dev/null 2>&1; then
    log_success "‚úÖ –õ–∏–Ω—Ç–µ—Ä –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ"
else
    log_warning "‚ö†Ô∏è  –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –ª–∏–Ω—Ç–µ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é"
fi

log_info "=== –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ==="

if [[ $errors -eq 0 ]]; then
    log_success "üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
    exit 0
else
    log_error "‚ùå –ù–∞–π–¥–µ–Ω–æ $errors –æ—à–∏–±–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é."
    log_info "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    log_info "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏"
    log_info "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –µ—â–µ —Ä–∞–∑"
    log_info "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    exit 1
fi 